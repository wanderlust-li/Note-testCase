@page "/createnote"
@using Notes.Web.Models.DTO
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Create Note</h3>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="@noteCreateDto" OnValidSubmit="@HandleValidSubmit" FormName="CreateNoteForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="title">Title:</label>
        <InputText id="title" class="form-control" @bind-Value="@noteCreateDto.Title" />
        <ValidationMessage For="@(() => noteCreateDto.Title)" />
    </div>

    <div class="form-group">
        <label for="content">Content:</label>
        <InputTextArea id="content" class="form-control" @bind-Value="@noteCreateDto.Content" />
        <ValidationMessage For="@(() => noteCreateDto.Content)" />
    </div>

    <button type="submit" class="btn btn-primary">Create Note</button>
</EditForm>

@code {
    private NoteCreateDTO noteCreateDto = new NoteCreateDTO();
    private string errorMessage;

    private async Task HandleValidSubmit()
    {
        errorMessage = string.Empty; // Clear previous errors
        try
        {
            // Validate if both title and content are filled
            if (string.IsNullOrWhiteSpace(noteCreateDto.Title) || string.IsNullOrWhiteSpace(noteCreateDto.Content))
            {
                errorMessage = "Title and Content are required fields.";
                return;
            }

            // Create a new object containing title and content
            var noteData = new
            {
                Title = noteCreateDto.Title,
                Content = noteCreateDto.Content
            };

            // Send POST request with noteData
            var response = await Http.PostAsJsonAsync("http://localhost:5080/Note/create-note", noteData);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/notes");
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                errorMessage = "Error creating note: " + errorResponse;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
        }
    }
}
